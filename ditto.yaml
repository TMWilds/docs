openapi: 3.0.3
info:
  title: Ditto HTTP RPC API
  version: 4.0.0
servers:
  - url: "{base_url}/api/v4"
    description: The Ditto Big Peer that synchronizes and makes data available cloud compute & storage.
    variables:
      base_url:
        default: https://ecf02768-25ff-4b58-a997-9ab82d8a2f99.cloud.ditto.live
        description: This is your Cloud URL Endpoint from the Ditto Portal
paths:
  /store/count:
    post:
      description: ""
      operationId: count_endpoint
      parameters:
        - name: X-DITTO-TXN-ID
          in: header
          description: This optional header is the minimum transaction ID to act on.  If big peer isn't on the transaction ID or newer then a 404 will be returned with no changes made.
          required: false
          deprecated: false
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CountRequest"
        required: true
      responses:
        "200":
          description: RPC call was successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CountResponse"
            application/cbor:
              schema:
                $ref: "#/components/schemas/CountResponse"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RpcError"
            application/cbor:
              schema:
                $ref: "#/components/schemas/RpcError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RpcError"
            application/cbor:
              schema:
                $ref: "#/components/schemas/RpcError"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RpcError"
            application/cbor:
              schema:
                $ref: "#/components/schemas/RpcError"
      deprecated: false
  /store/execute:
    post:
      summary: Execute a Ditto Query Language statement. See <https://docs.ditto.live/dql-guide>
      description: |
        Execute a Ditto Query Language statement. See <https://docs.ditto.live/dql-guide>
      operationId: execute_endpoint
      parameters:
        - name: X-DITTO-TXN-ID
          in: header
          description: This optional header is the minimum transaction ID to act on. If big peer isn't on the transaction ID or newer then a 404 will be returned with no changes made.
          required: false
          deprecated: false
          schema:
            type: integer
            format: int64
      requestBody:
        description: Execute a Ditto Query Language statement. The statement is formed with the parameter $statement and the parameter $args.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QueryRequest"
        required: true
      responses:
        "200":
          description: The statement was executed successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueryResponse"
              example:
                transactionId: 100
                queryType: select
                items:
                  - _id: 1
                    name: Francis
                    favoriteBook:
                      title: The Great Gatsby
                      published: 1925
                mutatedDocumentIds: []
                error: {}
                warnings: []
                totalWarningsCount: 0
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueryResponse"
              example:
                queryType: unknown
                items: []
                mutatedDocumentIds: []
                error:
                  description: ...
                warnings: []
                totalWarningsCount: 0
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueryResponse"
              example:
                queryType: unknown
                items: []
                mutatedDocumentIds: []
                error:
                  description: ...
                warnings: []
                totalWarningsCount: 0
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueryResponse"
              example:
                queryType: unknown
                items: []
                mutatedDocumentIds: []
                error:
                  description: ...
                warnings: []
                totalWarningsCount: 0
        "408":
          description: Request Timeout
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueryResponse"
              example:
                queryType: unknown
                items: []
                mutatedDocumentIds: []
                error:
                  description: ...
                warnings: []
                totalWarningsCount: 0
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueryResponse"
              example:
                queryType: unknown
                items: []
                mutatedDocumentIds: []
                error:
                  description: ...
                warnings: []
                totalWarningsCount: 0
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueryResponse"
              example:
                queryType: unknown
                items: []
                mutatedDocumentIds: []
                error:
                  description: ...
                warnings: []
                totalWarningsCount: 0
      deprecated: false
  /store/find:
    post:
      description: ""
      operationId: find_endpoint
      parameters:
        - name: X-DITTO-TXN-ID
          in: header
          description: This optional header is the minimum transaction ID to act on.  If big peer isn't on the transaction ID or newer then a 404 will be returned with no changes made.
          required: false
          deprecated: false
          schema:
            type: integer
            format: int64
      requestBody:
        description: Find up to $limit number of records from an $offset in the $collection.  The query is formed with the parameter $query and the parameters $args.  Optionally query details can be turned on with $describe and type annotation can be enabled with $serializeAs
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FindRequest"
        required: true
      responses:
        "200":
          description: "The call was completed successfully, even if no records were found.  Any documents found will be returned as an array in the documents parameter.  If no records are found it will be an empty array "
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FindResponse"
            application/cbor:
              schema:
                $ref: "#/components/schemas/FindResponse"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RpcError"
            application/cbor:
              schema:
                $ref: "#/components/schemas/RpcError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RpcError"
            application/cbor:
              schema:
                $ref: "#/components/schemas/RpcError"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RpcError"
            application/cbor:
              schema:
                $ref: "#/components/schemas/RpcError"
      deprecated: false
  /store/findbyid:
    post:
      description: ""
      operationId: find_by_id_endpoint
      parameters:
        - name: X-DITTO-TXN-ID
          in: header
          description: This optional header is the minimum transaction ID to act on.  If big peer isn't on the transaction ID or newer then a 404 will be returned with no changes made.
          required: false
          deprecated: false
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FindByIdRequest"
        required: true
      responses:
        "200":
          description: RPC call was successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FindByIdResponse"
            application/cbor:
              schema:
                $ref: "#/components/schemas/FindByIdResponse"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RpcError"
            application/cbor:
              schema:
                $ref: "#/components/schemas/RpcError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RpcError"
            application/cbor:
              schema:
                $ref: "#/components/schemas/RpcError"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RpcError"
            application/cbor:
              schema:
                $ref: "#/components/schemas/RpcError"
      deprecated: false
  /store/write:
    post:
      description: ""
      operationId: write_endpoint
      parameters:
        - name: X-DITTO-TXN-ID
          in: header
          description: This optional header is the minimum transaction ID to act on.  If big peer isn't on the transaction ID or newer then a 404 will be returned with no changes made.
          required: false
          deprecated: false
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WriteRequest"
        required: true
      responses:
        "200":
          description: RPC call was successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WriteResponse"
            application/cbor:
              schema:
                $ref: "#/components/schemas/WriteResponse"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RpcError"
            application/cbor:
              schema:
                $ref: "#/components/schemas/RpcError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RpcError"
            application/cbor:
              schema:
                $ref: "#/components/schemas/RpcError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RpcError"
            application/cbor:
              schema:
                $ref: "#/components/schemas/RpcError"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RpcError"
            application/cbor:
              schema:
                $ref: "#/components/schemas/RpcError"
      deprecated: false
  /sync/remote_execute:
    post:
      description: ""
      operationId: remote_execute_endpoint
      requestBody:
        description: Remote execute of the Ditto Query Language statement onconnected Peers that match SYNC CONTEXT statement
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RemoteExecuteRequest"
        required: true
      responses:
        "200":
          description: The call was completed successfully, even if no records were found. Any documents found will be returned as an array in the documentsparameter. If no records are found it will be an empty array
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RemoteExecuteResponse"
            application/cbor:
              schema:
                $ref: "#/components/schemas/RemoteExecuteResponse"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RpcError"
            application/cbor:
              schema:
                $ref: "#/components/schemas/RpcError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RpcError"
            application/cbor:
              schema:
                $ref: "#/components/schemas/RpcError"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RpcError"
            application/cbor:
              schema:
                $ref: "#/components/schemas/RpcError"
      deprecated: false
components:
  schemas:
    CountRequest:
      type: object
      description: Request object of the "Count" RPC method.
      required:
        - collection
        - query
      properties:
        args:
          $ref: "#/components/schemas/AnyValue"
        collection:
          type: string
          description: The collection to query
        query:
          type: string
          description: The parameterized query to run.
      example:
        collection: people
        query: favoriteBook.title == 'The Great Gatsby'
    CountResponse:
      type: object
      description: Response object of the "Count" RPC method.
      required:
        - count
        - txnId
      properties:
        count:
          type: integer
          format: int64
        txnId:
          type: integer
          format: int64
      example:
        count: 100
        txnId: 9000
    Direction:
      type: string
      enum:
        - asc
        - desc
    Document:
      type: object
      description: A Document is a Map that can contain other CRDT types
      required:
        - id
        - fields
      properties:
        fields:
          $ref: "#/components/schemas/AnyValue"
        id:
          $ref: "#/components/schemas/AnyValue"
    FindByIdRequest:
      type: object
      description: Find a document by its id
      required:
        - collection
        - id
      properties:
        collection:
          type: string
          description: The name of the ditto collection
        formatAttachment:
          type: boolean
          default: false
        id:
          $ref: "#/components/schemas/AnyValue"
        serializedAs:
          $ref: "#/components/schemas/SerializedAs"
      example:
        collection: people
        id: abc123
    FindByIdResponse:
      allOf:
        - $ref: "#/components/schemas/Document"
        - type: object
          properties:
            txnId:
              type: integer
              format: int64
              description: Transaction ID
    FindRequest:
      type: object
      description: A data transfer object for a request to the "Find" RPC method.
      required:
        - collection
        - query
      properties:
        args:
          $ref: "#/components/schemas/AnyValue"
        collection:
          type: string
          description: The collection to query
        describe:
          type: boolean
          default: false
        formatAttachment:
          type: boolean
          default: false
        limit:
          type: integer
          format: int32
          description: The limit
          default: 1000
        offset:
          type: integer
          format: int32
          description: The offset
        query:
          type: string
          description: The parameterized query to run.
        serializedAs:
          $ref: "#/components/schemas/SerializedAs"
        sort:
          type: array
          items:
            $ref: "#/components/schemas/Sort"
      example:
        collection: people
        query: favoriteBook.title == 'The Great Gatsby'
    FindResponse:
      type: object
      required:
        - documents
      properties:
        documents:
          type: array
          items:
            $ref: "#/components/schemas/Document"
        txnId:
          type: integer
          format: int64
      example:
        documents:
          id: 1
          contents:
            name: Francis
            favoriteBook:
              title: The Great Gatsby
              published: 1925
        txnId: 9000
    QueryRequest:
      type: object
      description: A data transfer object for a request to the "execute" RPC method
      required:
        - statement
      properties:
        args:
          $ref: "#/components/schemas/AnyValue"
        statement:
          type: string
          description: A statement written in Ditto Query Language. See <https://docs.ditto.live/dql-guide>
      example:
        statement: SELECT * FROM people WHERE favoriteBook.title = :title
        args:
          title: The Great Gatsby
    QueryResponse:
      type: object
      description: Response type for the "execute" RPC method
      required:
        - queryType
        - items
        - mutatedDocumentIds
        - warnings
        - totalWarningsCount
      properties:
        error:
          $ref: "#/components/schemas/QueryResponseError"
        items:
          type: array
          items:
            $ref: "#/components/schemas/AnyValue"
        mutatedDocumentIds:
          type: array
          items:
            $ref: "#/components/schemas/AnyValue"
        queryType:
          type: string
          description: Indicates the type of query that was executed
        totalWarningsCount:
          type: integer
          format: int64
          description: Total number of warnings generated during query execution
        transactionId:
          type: integer
          format: int64
        warnings:
          type: array
          items:
            $ref: "#/components/schemas/QueryResponseWarning"
    QueryResponseError:
      type: object
      description: An error occurred that prevented the query from executing or completing successfully
      properties:
        description:
          type: string
    QueryResponseWarning:
      type: object
      description: Indicates any run-time warnings that might arise during query execution
      required:
        - description
      properties:
        _id:
          $ref: "#/components/schemas/AnyValue"
        description:
          type: string
    RemoteExecuteError:
      type: object
      required:
        - description
      properties:
        description:
          type: string
    RemoteExecutePeerItem:
      type: object
      description: Peer item type that corresponds to the data returned for the particular peer
      properties:
        elapsedMilliseconds:
          $ref: "#/components/schemas/AnyValue"
        error:
          $ref: "#/components/schemas/RemoteExecuteError"
        items:
          type: array
          items:
            $ref: "#/components/schemas/AnyValue"
        peer:
          $ref: "#/components/schemas/AnyValue"
        totalWarningsCount:
          $ref: "#/components/schemas/AnyValue"
        warnings:
          type: array
          items:
            $ref: "#/components/schemas/AnyValue"
    RemoteExecuteRequest:
      type: object
      description: A data transfer object for a request to the "remote_execute" RPC method
      required:
        - statement
      properties:
        args:
          $ref: "#/components/schemas/AnyValue"
        statement:
          type: string
          description: A full statement that contains sync context statement and statement written in Ditto Query Language. See <https://docs.ditto.live/dql-guide>
      example:
        statement: SYNC CONTEXT ( PEERS WHERE peerKeyString = 'pkAg' ) SELECT * FROM cars WHERE _id = '1'
    RemoteExecuteResponse:
      type: object
      description: An error occurred that prevented the remote query from executing or completing successfully
      required:
        - result
      properties:
        error:
          $ref: "#/components/schemas/RemoteExecuteError"
        result:
          type: array
          items:
            $ref: "#/components/schemas/RemoteExecutePeerItem"
    Remove:
      type: object
      description: Removing a field
      required:
        - collection
        - query
      properties:
        args:
          $ref: "#/components/schemas/AnyValue"
        collection:
          type: string
        query:
          type: string
    RemoveResult:
      type: object
      required:
        - transactionId
        - deleted
      properties:
        deleted:
          type: integer
          format: int64
        internalError:
          type: integer
          format: int64
        permissionDenied:
          type: integer
          format: int64
        transactionId:
          type: integer
          format: int64
    RpcError:
      type: object
      description: Error during request
      required:
        - message
      properties:
        message:
          type: string
          description: A human readable description
      example:
        message: Some kind of human readable description of the error
    SerializedAs:
      type: string
      default: latestValues
      enum:
        - latestValues
        - latestValuesAndTypes
    Sort:
      type: object
      required:
        - property
        - direction
      properties:
        direction:
          $ref: "#/components/schemas/Direction"
        property:
          type: string
    TypeOverride:
      type: string
      description: This is a list of possible value type overrides for an upsert.
      enum:
        - counter
        - register
        - attachment
    Update:
      type: object
      description: Update an existing value
      required:
        - collection
        - query
        - commands
      properties:
        args:
          $ref: "#/components/schemas/AnyValue"
        collection:
          type: string
          description: The Collection type
        commands:
          type: array
          items:
            $ref: "#/components/schemas/UpdateCommand"
        query:
          type: string
          description: The query
    UpdateCommand:
      type: object
      description: Update an existing value
      required:
        - method
        - path
        - value
      properties:
        method:
          $ref: "#/components/schemas/UpdateCommandMethod"
        path:
          type: string
        value:
          $ref: "#/components/schemas/AnyValue"
    UpdateCommandMethod:
      type: string
      description: Update commands for mutable fields
      enum:
        - set
        - setAttachment
        - increment
        - replaceWithCounter
    UpdateResult:
      type: object
      required:
        - transactionId
        - updated
        - error
      properties:
        error:
          type: integer
          format: int64
        internalError:
          type: integer
          format: int64
        permissionDenied:
          type: integer
          format: int64
        transactionId:
          type: integer
          format: int64
        updated:
          type: integer
          format: int64
    Upsert:
      type: object
      description: Upserting a value
      required:
        - collection
        - value
      properties:
        collection:
          type: string
        id:
          $ref: "#/components/schemas/AnyValue"
        value:
          $ref: "#/components/schemas/AnyValue"
        valueTypeOverrides:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/TypeOverride"
    UpsertResult:
      type: object
      required:
        - transactionId
      properties:
        transactionId:
          type: integer
          format: int64
    WriteCommand:
      oneOf:
        - allOf:
            - $ref: "#/components/schemas/Update"
            - type: object
              required:
                - method
              properties:
                method:
                  type: string
                  enum:
                    - update
        - allOf:
            - $ref: "#/components/schemas/Upsert"
            - type: object
              required:
                - method
              properties:
                method:
                  type: string
                  enum:
                    - upsert
        - allOf:
            - $ref: "#/components/schemas/Remove"
            - type: object
              required:
                - method
              properties:
                method:
                  type: string
                  enum:
                    - remove
      description: The corresponding database transaction to perform
      discriminator:
        propertyName: method
        mapping:
          remove: "#/components/schemas/Remove"
          update: "#/components/schemas/Update"
          upsert: "#/components/schemas/Upsert"
    WriteCommandResult:
      oneOf:
        - allOf:
            - $ref: "#/components/schemas/UpdateResult"
            - type: object
              required:
                - method
              properties:
                method:
                  type: string
                  enum:
                    - update
        - allOf:
            - $ref: "#/components/schemas/UpsertResult"
            - type: object
              required:
                - method
              properties:
                method:
                  type: string
                  enum:
                    - upsert
        - allOf:
            - $ref: "#/components/schemas/RemoveResult"
            - type: object
              required:
                - method
              properties:
                method:
                  type: string
                  enum:
                    - remove
      discriminator:
        propertyName: method
        mapping:
          remove: "#/components/schemas/RemoveResult"
          update: "#/components/schemas/UpdateResult"
          upsert: "#/components/schemas/UpsertResult"
    WriteRequest:
      type: object
      description: Open a write transaction
      required:
        - commands
      properties:
        commands:
          type: array
          items:
            $ref: "#/components/schemas/WriteCommand"
      example:
        commands:
          - method: upsert
            collection: people
            id: 1
            value:
              name: Susan
              age: 31
              favoriteBook:
                published: 1925
                title: The Great Gatsby
    WriteResponse:
      type: object
      description: Response from a write
      required:
        - results
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/WriteCommandResult"
    AnyValue: {}
  securitySchemes:
    api_key_or_jwt_token:
      type: http
      scheme: bearer
      bearerFormat: API Key or JWT
security:
  - api_key_or_jwt_token: []
externalDocs:
  url: https://docs.ditto.live/http/installation/
  description: For more detailed instructions on how to use this API and the Ditto SDK, please see the documentation.
